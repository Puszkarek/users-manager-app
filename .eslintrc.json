{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nrwl/nx"],
  "overrides": [
    // * Main Rules
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.base.json"],
        "createDefaultProgram": true
      },
      "plugins": ["@typescript-eslint", "simple-import-sort"],
      "extends": [
        "eslint:recommended",
        "plugin:@nrwl/nx/typescript",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],

        "arrow-body-style": "off",
        "prefer-arrow-callback": "off",

        // Avoid possible Problems
        "array-callback-return": "error",
        "no-await-in-loop": "error",
        "no-constant-binary-expression": "error",
        "no-constructor-return": "error",
        "no-duplicate-imports": "error",
        "no-promise-executor-return": "error",
        "no-self-compare": "error",
        "no-template-curly-in-string": "error",
        "no-unmodified-loop-condition": "error",
        "no-unreachable-loop": "error",
        "no-unused-private-class-members": "error",
        "require-atomic-updates": "error",
        "use-isnan": "error",

        // Alternate ways of doing things
        "accessor-pairs": "error",
        "block-scoped-var": "error",
        "camelcase": ["error", { "properties": "always" }],
        "capitalized-comments": "error",
        "complexity": ["error", 10],
        "consistent-return": "error",
        "consistent-this": "error",
        "curly": "error",
        "default-case-last": "error",
        "default-param-last": "error",
        //"dot-notation": ["error", { "allowKeywords": true }],
        "eqeqeq": "error",
        "func-name-matching": "error",
        "func-names": ["error", "always"],
        "func-style": "error",
        "grouped-accessor-pairs": "error",
        "id-denylist": ["error", "err", "e", "cb", "callback"],
        "id-length": ["error", { "min": 2, "max": 35 }],
        "max-classes-per-file": ["error", 2],
        "max-depth": ["error", 4],
        "max-lines": [
          "error",
          { "max": 300, "skipBlankLines": true, "skipComments": true }
        ],
        "max-lines-per-function": [
          "error",
          { "max": 65, "skipBlankLines": true, "skipComments": true }
        ],
        "max-nested-callbacks": ["error", 3],
        "max-params": ["error", 8],
        "max-statements": ["error", 15],
        "multiline-comment-style": ["error", "starred-block"],
        "no-alert": "error",
        "no-array-constructor": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-continue": "error",
        "no-delete-var": "error",
        "no-div-regex": "error",
        "no-else-return": "error",
        "no-empty": "warn",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-boolean-cast": "error",
        "no-implicit-coercion": "error",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-mixed-operators": "error",
        "no-multi-assign": "error",
        "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "error",
        "no-plusplus": "error",
        "no-return-assign": "error",
        "no-return-await": "error",
        "no-sequences": "error",
        "no-global-assign": "error",
        "no-shadow-restricted-names": "error",
        "no-useless-computed-key": "error",
        "no-useless-concat": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "prefer-destructuring": "error",
        "prefer-object-spread": "error",
        "prefer-template": "error",
        "quote-props": ["error", "consistent-as-needed"],
        "radix": "error",
        "sort-vars": "error",
        "vars-on-top": "error",
        "yoda": "error",
        "spaced-comment": [
          "error",
          "always",
          {
            "line": {
              "markers": ["/"],
              "exceptions": ["-", "+"]
            },
            "block": {
              "markers": ["!"],
              "exceptions": ["*"],
              "balanced": true
            }
          }
        ],

        // Layout & Formatting
        "array-bracket-newline": ["error", "consistent"],
        "array-element-newline": ["error", "consistent"],
        "block-spacing": ["error", "always"],
        "brace-style": "error",
        "lines-around-comment": [
          "error",
          {
            "beforeBlockComment": false,
            "allowArrayStart": true,
            "allowBlockStart": true,
            "allowObjectStart": true
          }
        ],
        "lines-between-class-members": [
          "error",
          "always",
          { "exceptAfterSingleLine": true }
        ],

        // Import rules
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",

        // Typescript Rules
        "@typescript-eslint/array-type": ["error", { "default": "generic" }],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "error",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/class-literal-property-style": "error",
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            "assertionStyle": "angle-bracket",
            "objectLiteralTypeAssertions": "allow-as-parameter"
          }
        ],
        "@typescript-eslint/consistent-type-definitions": ["error", "type"],
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": { "constructors": "no-public" }
          }
        ],
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": "error",
        "@typescript-eslint/member-ordering": [
          "warn",
          {
            "default": {
              "memberTypes": [
                "instance-field",
                "constructor",
                "instance-method"
              ]
            }
          }
        ],
        "@typescript-eslint/method-signature-style": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": ["variableLike", "memberLike"],
            "format": ["camelCase"],
            "modifiers": ["private"],
            "prefix": ["_"]
          }
        ],
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-void-expression": [
          "error",
          { "ignoreArrowShorthand": true }
        ],
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": ["error"],
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": ["error"],
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": [
          "warn",
          {
            "ignore": [1, 0],
            "ignoreDefaultValues": true,
            "enforceConst": true,
            "ignoreNumericLiteralTypes": true,
            "ignoreTypeIndexes": false
          }
        ],
        "@typescript-eslint/no-misused-promises": "error",
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": ["error"],
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-require-imports": "error",
        "no-restricted-imports": "off",
        "@typescript-eslint/no-restricted-imports": ["error"],
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": ["error"],
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": ["error"],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
          "error",
          { "allowComparingNullableBooleansToFalse": false }
        ],
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-enum-initializers": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        /*
        "@typescript-eslint/prefer-readonly-parameter-types": [
          "error",
          { "checkParameterProperties": false, "treatMethodsAsReadonly": false }
        ],
        */
        "@typescript-eslint/prefer-readonly": [
          "error",
          { "onlyInlineLambdas": true }
        ],
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/promise-function-async": [
          "error",
          {
            "allowedPromiseNames": ["Thenable"],
            "checkArrowFunctions": true,
            "checkFunctionDeclarations": true,
            "checkFunctionExpressions": true,
            "checkMethodDeclarations": true
          }
        ],
        "@typescript-eslint/require-array-sort-compare": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error"
      }
    },
    // * Angular Rules
    {
      "files": ["apps/user-demo/**/*.ts"],
      "extends": [
        "plugin:@nrwl/nx/angular",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        // Angular rules
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/contextual-decorator": "error",
        "@angular-eslint/contextual-lifecycle": "error",
        "@angular-eslint/no-attribute-decorator": "error",
        "@angular-eslint/no-lifecycle-call": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-pipe-impure": "error",
        "@angular-eslint/prefer-on-push-component-change-detection": "error",

        "@angular-eslint/use-injectable-provided-in": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/component-max-inline-declarations": [
          "error",
          { "animations": 20, "styles": 8, "template": 5 }
        ],
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-input-prefix": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/prefer-output-readonly": "error",
        "@angular-eslint/relative-url-prefix": "error",
        "@angular-eslint/use-component-selector": "error",
        "@angular-eslint/use-component-view-encapsulation": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@angular-eslint/component-class-suffix": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/no-queries-metadata-property": "error"
      }
    },
    // * Custom Rules
    {
      "files": ["*.ts"],
      "excludedFiles": ["*.spec.ts"],

      "plugins": ["unicorn", "functional", "lodash"],
      "extends": ["plugin:lodash/canonical", "plugin:unicorn/recommended"],
      "rules": {
        // Lodash
        "lodash/prefer-constant": "off",

        // Custom rules
        "unicorn/no-null": "off",
        "unicorn/prefer-event-target": "off",
        "lodash/import-scope": ["error", "member"],
        "lodash/prefer-lodash-method": "warn",
        "functional/no-expression-statement": "off",
        "functional/no-return-void": "off",
        "functional/no-try-statement": "off",
        "functional/no-conditional-statement": "off",

        // Functional Programming
        "functional/immutable-data": [
          "error",
          { "ignoreClass": true, "ignoreImmediateMutation": true }
        ],
        "functional/no-let": "error",
        "functional/no-method-signature": "error",
        "functional/prefer-readonly-type": [
          "error",
          { "ignoreClass": "fieldsOnly" }
        ],
        "functional/no-mixed-type": "error",
        "functional/no-loop-statement": "error",
        "functional/no-promise-reject": "error",
        "functional/no-throw-statement": "error",
        "functional/prefer-tacit": "error",
        "no-var": "error"
      }
    },
    // * HTML Rules
    {
      "files": ["*.html"],
      "extends": [
        "plugin:@nrwl/nx/angular-template",
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {
        "@angular-eslint/template/accessibility-alt-text": "error",
        "@angular-eslint/template/accessibility-elements-content": "error",
        "@angular-eslint/template/accessibility-table-scope": "error",
        "@angular-eslint/template/accessibility-valid-aria": "error",
        "@angular-eslint/template/click-events-have-key-events": "error",
        "@angular-eslint/template/no-any": "error",
        "@angular-eslint/template/no-distracting-elements": "error",
        "@angular-eslint/template/no-negated-async": "error",
        "@angular-eslint/template/conditional-complexity": ["error"],
        "@angular-eslint/template/cyclomatic-complexity": "error",
        "@angular-eslint/template/no-call-expression": "off",
        "@angular-eslint/template/use-track-by-function": "error"
      }
    },
    // * Spec Rules
    {
      "files": ["*.spec.ts", "*.cy.ts"],
      "env": {
        "jest": true
      },
      "rules": {
        "@typescript-eslint/init-declarations": "off",
        "fp/no-let": "off",
        "fp/no-mutation": "off"
      }
    }
  ]
}
